import {Storage} from '@google-cloud/storage';
import {SHARED_CONFIG} from 'definitions';
import {firestore} from 'firebase-admin';
import * as functions from 'firebase-functions';
import {ObjectMetadata} from 'firebase-functions/lib/providers/storage';
import {unlink} from 'fs';
import {tmpdir} from 'os';
import {basename, dirname, join} from 'path';
import * as sharp from 'sharp';
import {promisify} from 'util';
import {unpackGenerateImageString} from '../utils/unpack-generate-image-string';

export const fileCreated = functions
  .region(SHARED_CONFIG.cloudRegion)
  .runWith({
    memory: '1GB',
    timeoutSeconds: 300
  })
  .storage.object()
  .onFinalize(async ({bucket, name, contentType, metadata, timeCreated, size}: ObjectMetadata) => {
    const fileName = basename(name);
    const dirName = dirname(name);
    const folders = {};
    
    /**
     * Drive
     */
    const driveDocument = {
      name: fileName,
      path: dirName,
      type: name.endsWith('/') ? 'folder' : 'file',
      metadata: metadata || {},
      contentType: contentType || '',
      createdOn: new Date(timeCreated).getTime(),
      size: Number(size || 0)
    };

    const previousDriveDocument = await firestore()
      .collection('drive')
      .where('name', '==', driveDocument.name)
      .where('path', '==', driveDocument.path).get().then(snapshot => {
        if (snapshot.empty) {
          return null;
        }
        return {
          id: snapshot.docs[0].id,
          ...snapshot.docs[0].data()
        };
      });

    if (previousDriveDocument) {
      await firestore().collection('drive').doc(previousDriveDocument.id).set(driveDocument, {merge: true});
    } else {
      await firestore().collection('drive').add(driveDocument);
    }

    /**
     * Mimic folder documents since they are not created by the Firebase
     */
    const paths = driveDocument.path.split('/');
    for (let i = 0; i < paths.length; i++) {
      const parentPath = paths.slice(0, i + 1).join('/');

      if (!parentPath || parentPath === '.') {
        continue;
      }


      if (!folders[parentPath]) {
        folders[parentPath] = {
          name: paths[i],
          path: paths.slice(0, i).join('/') || '.',
          type: 'folder',
          metadata: {},
          contentType: 'text/plain',
          createdOn: driveDocument.createdOn,
          size: 0
        };
      }

      if (driveDocument.createdOn < folders[parentPath].createdOn) {
        folders[parentPath].createdOn = driveDocument.createdOn;
      }
    }

    for (const [_, folder] of Object.entries(folders)) {
      const previousFolder = await firestore().collection('drive')
        .where('name', '==', (folder as any).name)
        .where('path', '==', (folder as any).path).get();

      if (previousFolder.empty) {
        await firestore().collection('drive').add(folder);
      }
    }

    /**
     * Skip if the file is already a thumb or is autogenerated
     * or there aren't any meta files to generate
     */
    if (
      !contentType.startsWith('image/') ||
      !metadata ||
      !metadata['generate_1'] ||
      metadata.generated
    ) {
      return;
    }

    /**
     * Temporary main file download
     */
    const fileTemp = join(tmpdir(), fileName);
    const toGenerate = [];
    const webpToGenerate = [];

    for (const key in metadata) {
      if (key.includes('generate_')) {
        const {
          filePrefix,
          height,
          width,
          webpVersion,
          folder
        } = unpackGenerateImageString(metadata[key]);
        const fName = (filePrefix || '') + fileName;
        const tmpDir = join(tmpdir(), fName);

        if (filePrefix || width || height) {
          toGenerate.push({
            tmpDir,
            fName,
            height,
            width,
            folder: folder || 'generated'
          });
        }

        if (webpVersion) {
          webpToGenerate.push({
            folder: folder || 'generated',
            fName: fName.replace(/(.jpg|.png|.jpeg)/i, '.webp'),
            source: tmpDir,
            destination: tmpDir.replace(/(.jpg|.png|.jpeg)/i, '.webp')
          });
        }
      }
    }

    const generateMetadata = {
      generated: 'true',
      source: fileName,
      moduleId: metadata.moduleId,
      documentId: metadata.documentId
    };

    const storage = new Storage().bucket(bucket);
    await storage.file(name).download({
      destination: fileTemp
    });

    await Promise.all(
      toGenerate.map(async file => {
        const buffer = await sharp(fileTemp)
          .resize(file.width || null, file.height || null, {fit: 'contain', background: 'white'})
          .withMetadata()
          .toBuffer();

        return sharp(buffer).toFile(file.tmpDir);
      })
    );

    if (webpToGenerate.length) {
      await Promise.all(
        webpToGenerate.map(async file => {
          const buffer = await sharp(file.source)
            .webp({lossless: true})
            .toBuffer();

          return sharp(buffer).toFile(file.destination);
        })
      );
    }

    await Promise.all([
      ...toGenerate.map(file =>
        storage.upload(file.tmpDir, {
          metadata: {
            metadata: generateMetadata,
            contentType
          },
          destination: join(dirName, file.folder, file.fName)
        })
      ),

      ...webpToGenerate.map(file =>
        storage.upload(file.destination, {
          metadata: {
            metadata: generateMetadata,
            contentType: 'image/webp'
          },
          destination: join(dirName, file.folder, file.fName)
        })
      )
    ]);

    const unLink = promisify(unlink);

    await Promise.all(toGenerate.map(it => unLink(it.tmpDir)));

    return true;
  });
